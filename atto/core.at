def _ "ARITHMETIC OPERATORS"

def +'' |x| |y|
	__add x y

def -'' |x| |y|
	__sub x y

def *'' |x| |y|
	__mul x y

def /'' |x| |y|
	__div x y

def %'' |x| |y|
	__rem x y

def floor' |x|
	__floor x

def ceil' |x|
	__ceil x

def min'' |x| |y|
	if < x y
		x
	y

def max'' |x| |y|
	if > x y
		x
	y

def _ "COMPARISON OPERATORS"

def ='' |x| |y|
	__eq x y

def <'' |x| |y|
	__less x y

def >'' |x| |y|
	__less y x

def <='' |x| |y|
	__lesseq x y

def >='' |x| |y|
	__lesseq y x

def _ "LIST OPERATORS"

def head' |l|
	__head l

def tail' |l|
	__tail l

def wrap' |l|
	__wrap l

def cat'' |a| |b|
	__cat a b

def pair'' |a| |b|
	__cat __wrap a __wrap b

def _ "IO"

def print'' |@| |msg|
	__print @ msg

def input' |@|
	__input @

def _ "LIST UTILITIES"

def ['' |items| |t|
	__cat __wrap items t

def ,'' |x| |y|
	__cat __wrap x y

def ] empty

def empty __tail __wrap null

def len' |list|
	if = empty list
		0
	+ 1 len tail list

def nth'' |n| |list|
	if = 0 n
		head list
	nth - n 1 tail list

def split'' |n| |list|
	if = 0 n
		[empty, list]
	let |h t| split - n 1 tail list
	pair
		cat head list h
		t

def flatten' |ll|
	if = empty ll
		empty
	if = 1 len ll
		head ll
	cat
		head ll
		flatten tail ll

def _ "NUMERICAL LIST OPERATIONS"

def sort_cmp'' |n| |list|
	if = empty list
		[empty, empty, empty]
	let |lo mid hi| := sort_cmp n tail list
	cmp head list n
		|h| [cat [h] lo, mid, hi]
		|h| [lo, cat [h] mid, hi]
		|h| [lo, mid, cat [h] hi]

def list_min' |list|
	if = empty list
		null
	for iter list (head list)
		|min_so_far| |n| min min_so_far n

def list_max' |list|
	if = empty list
		null
	for iter list (head list)
		|max_so_far| |n| max max_so_far n

def _ "FLOW CONTROLS"

def #'' |x| |y| y

def ('' |expr| |_|
	expr

def ) null

def cmp''''' |x| |y| |if_less'| |if_eq'| |if_greater'|
	if < x y
		if_less x
	if > x y
		if_greater x
	if_eq x

def :=' |x|
	x

def done null

def _ "ITERATION"

def for''' |iter| |init| |f''|
	let |first iter_init iter_f'| := iter
	let |continue next iter_next| := iter_f iter_init
	if continue
		for [next, iter_next, $iter_f] (f init next) $f
	init

def range'' |start| |end|
	[start, start, |prev| if = prev end
		[false, null, null]
		[true, prev, + prev 1]
	]

def iter' |list|
	[head list, list, |prev| if = empty prev
		[false, null, null]
		[true, head prev, tail prev]
	]

def _ "ITERATOR UTILITIES"
